/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Customers as PrismaCustomers,
  Appointments as PrismaAppointments,
  Reviews as PrismaReviews,
} from "@prisma/client";

export class CustomersServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomersCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customers.count(args);
  }

  async customersItems<T extends Prisma.CustomersFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomersFindManyArgs>
  ): Promise<PrismaCustomers[]> {
    return this.prisma.customers.findMany<Prisma.CustomersFindManyArgs>(args);
  }
  async customers<T extends Prisma.CustomersFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomersFindUniqueArgs>
  ): Promise<PrismaCustomers | null> {
    return this.prisma.customers.findUnique(args);
  }
  async createCustomers<T extends Prisma.CustomersCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomersCreateArgs>
  ): Promise<PrismaCustomers> {
    return this.prisma.customers.create<T>(args);
  }
  async updateCustomers<T extends Prisma.CustomersUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomersUpdateArgs>
  ): Promise<PrismaCustomers> {
    return this.prisma.customers.update<T>(args);
  }
  async deleteCustomers<T extends Prisma.CustomersDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomersDeleteArgs>
  ): Promise<PrismaCustomers> {
    return this.prisma.customers.delete(args);
  }

  async findAppointmentsItems(
    parentId: string,
    args: Prisma.AppointmentsFindManyArgs
  ): Promise<PrismaAppointments[]> {
    return this.prisma.customers
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointmentsItems(args);
  }

  async findReviewsItems(
    parentId: string,
    args: Prisma.ReviewsFindManyArgs
  ): Promise<PrismaReviews[]> {
    return this.prisma.customers
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviewsItems(args);
  }
}
