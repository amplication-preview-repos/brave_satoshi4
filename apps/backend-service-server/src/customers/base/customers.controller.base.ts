/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomersService } from "../customers.service";
import { CustomersCreateInput } from "./CustomersCreateInput";
import { Customers } from "./Customers";
import { CustomersFindManyArgs } from "./CustomersFindManyArgs";
import { CustomersWhereUniqueInput } from "./CustomersWhereUniqueInput";
import { CustomersUpdateInput } from "./CustomersUpdateInput";
import { AppointmentsFindManyArgs } from "../../appointments/base/AppointmentsFindManyArgs";
import { Appointments } from "../../appointments/base/Appointments";
import { AppointmentsWhereUniqueInput } from "../../appointments/base/AppointmentsWhereUniqueInput";
import { ReviewsFindManyArgs } from "../../reviews/base/ReviewsFindManyArgs";
import { Reviews } from "../../reviews/base/Reviews";
import { ReviewsWhereUniqueInput } from "../../reviews/base/ReviewsWhereUniqueInput";

export class CustomersControllerBase {
  constructor(protected readonly service: CustomersService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Customers })
  async createCustomers(
    @common.Body() data: CustomersCreateInput
  ): Promise<Customers> {
    return await this.service.createCustomers({
      data: data,
      select: {
        address: true,
        avatar: true,
        createdAt: true,
        email: true,
        fullName: true,
        id: true,
        loyaltyPoints: true,
        password: true,
        phone: true,
        refreshToken: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Customers] })
  @ApiNestedQuery(CustomersFindManyArgs)
  async customersItems(@common.Req() request: Request): Promise<Customers[]> {
    const args = plainToClass(CustomersFindManyArgs, request.query);
    return this.service.customersItems({
      ...args,
      select: {
        address: true,
        avatar: true,
        createdAt: true,
        email: true,
        fullName: true,
        id: true,
        loyaltyPoints: true,
        password: true,
        phone: true,
        refreshToken: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Customers })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customers(
    @common.Param() params: CustomersWhereUniqueInput
  ): Promise<Customers | null> {
    const result = await this.service.customers({
      where: params,
      select: {
        address: true,
        avatar: true,
        createdAt: true,
        email: true,
        fullName: true,
        id: true,
        loyaltyPoints: true,
        password: true,
        phone: true,
        refreshToken: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Customers })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomers(
    @common.Param() params: CustomersWhereUniqueInput,
    @common.Body() data: CustomersUpdateInput
  ): Promise<Customers | null> {
    try {
      return await this.service.updateCustomers({
        where: params,
        data: data,
        select: {
          address: true,
          avatar: true,
          createdAt: true,
          email: true,
          fullName: true,
          id: true,
          loyaltyPoints: true,
          password: true,
          phone: true,
          refreshToken: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Customers })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomers(
    @common.Param() params: CustomersWhereUniqueInput
  ): Promise<Customers | null> {
    try {
      return await this.service.deleteCustomers({
        where: params,
        select: {
          address: true,
          avatar: true,
          createdAt: true,
          email: true,
          fullName: true,
          id: true,
          loyaltyPoints: true,
          password: true,
          phone: true,
          refreshToken: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/appointmentsItems")
  @ApiNestedQuery(AppointmentsFindManyArgs)
  async findAppointmentsItems(
    @common.Req() request: Request,
    @common.Param() params: CustomersWhereUniqueInput
  ): Promise<Appointments[]> {
    const query = plainToClass(AppointmentsFindManyArgs, request.query);
    const results = await this.service.findAppointmentsItems(params.id, {
      ...query,
      select: {
        appointmentTime: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        id: true,

        service: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/appointmentsItems")
  async connectAppointmentsItems(
    @common.Param() params: CustomersWhereUniqueInput,
    @common.Body() body: AppointmentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentsItems: {
        connect: body,
      },
    };
    await this.service.updateCustomers({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/appointmentsItems")
  async updateAppointmentsItems(
    @common.Param() params: CustomersWhereUniqueInput,
    @common.Body() body: AppointmentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentsItems: {
        set: body,
      },
    };
    await this.service.updateCustomers({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/appointmentsItems")
  async disconnectAppointmentsItems(
    @common.Param() params: CustomersWhereUniqueInput,
    @common.Body() body: AppointmentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      appointmentsItems: {
        disconnect: body,
      },
    };
    await this.service.updateCustomers({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/reviewsItems")
  @ApiNestedQuery(ReviewsFindManyArgs)
  async findReviewsItems(
    @common.Req() request: Request,
    @common.Param() params: CustomersWhereUniqueInput
  ): Promise<Reviews[]> {
    const query = plainToClass(ReviewsFindManyArgs, request.query);
    const results = await this.service.findReviewsItems(params.id, {
      ...query,
      select: {
        comments: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
        rating: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reviewsItems")
  async connectReviewsItems(
    @common.Param() params: CustomersWhereUniqueInput,
    @common.Body() body: ReviewsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviewsItems: {
        connect: body,
      },
    };
    await this.service.updateCustomers({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reviewsItems")
  async updateReviewsItems(
    @common.Param() params: CustomersWhereUniqueInput,
    @common.Body() body: ReviewsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviewsItems: {
        set: body,
      },
    };
    await this.service.updateCustomers({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reviewsItems")
  async disconnectReviewsItems(
    @common.Param() params: CustomersWhereUniqueInput,
    @common.Body() body: ReviewsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviewsItems: {
        disconnect: body,
      },
    };
    await this.service.updateCustomers({
      where: params,
      data,
      select: { id: true },
    });
  }
}
