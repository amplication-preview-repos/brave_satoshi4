/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Employees as PrismaEmployees,
  Appointments as PrismaAppointments,
  Reviews as PrismaReviews,
  Stores as PrismaStores,
} from "@prisma/client";

export class EmployeesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmployeesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.employees.count(args);
  }

  async employeesItems<T extends Prisma.EmployeesFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeesFindManyArgs>
  ): Promise<PrismaEmployees[]> {
    return this.prisma.employees.findMany<Prisma.EmployeesFindManyArgs>(args);
  }
  async employees<T extends Prisma.EmployeesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeesFindUniqueArgs>
  ): Promise<PrismaEmployees | null> {
    return this.prisma.employees.findUnique(args);
  }
  async createEmployees<T extends Prisma.EmployeesCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeesCreateArgs>
  ): Promise<PrismaEmployees> {
    return this.prisma.employees.create<T>(args);
  }
  async updateEmployees<T extends Prisma.EmployeesUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeesUpdateArgs>
  ): Promise<PrismaEmployees> {
    return this.prisma.employees.update<T>(args);
  }
  async deleteEmployees<T extends Prisma.EmployeesDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeesDeleteArgs>
  ): Promise<PrismaEmployees> {
    return this.prisma.employees.delete(args);
  }

  async findAppointmentsItems(
    parentId: string,
    args: Prisma.AppointmentsFindManyArgs
  ): Promise<PrismaAppointments[]> {
    return this.prisma.employees
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointmentsItems(args);
  }

  async findReviewsItems(
    parentId: string,
    args: Prisma.ReviewsFindManyArgs
  ): Promise<PrismaReviews[]> {
    return this.prisma.employees
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviewsItems(args);
  }

  async findStoresItems(
    parentId: string,
    args: Prisma.StoresFindManyArgs
  ): Promise<PrismaStores[]> {
    return this.prisma.employees
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .storesItems(args);
  }

  async getStore(parentId: string): Promise<PrismaStores | null> {
    return this.prisma.employees
      .findUnique({
        where: { id: parentId },
      })
      .store();
  }
}
