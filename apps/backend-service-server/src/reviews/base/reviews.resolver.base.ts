/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Reviews } from "./Reviews";
import { ReviewsCountArgs } from "./ReviewsCountArgs";
import { ReviewsFindManyArgs } from "./ReviewsFindManyArgs";
import { ReviewsFindUniqueArgs } from "./ReviewsFindUniqueArgs";
import { CreateReviewsArgs } from "./CreateReviewsArgs";
import { UpdateReviewsArgs } from "./UpdateReviewsArgs";
import { DeleteReviewsArgs } from "./DeleteReviewsArgs";
import { Customers } from "../../customers/base/Customers";
import { Employees } from "../../employees/base/Employees";
import { Services } from "../../services/base/Services";
import { ReviewsService } from "../reviews.service";
@graphql.Resolver(() => Reviews)
export class ReviewsResolverBase {
  constructor(protected readonly service: ReviewsService) {}

  async _reviewsItemsMeta(
    @graphql.Args() args: ReviewsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Reviews])
  async reviewsItems(
    @graphql.Args() args: ReviewsFindManyArgs
  ): Promise<Reviews[]> {
    return this.service.reviewsItems(args);
  }

  @graphql.Query(() => Reviews, { nullable: true })
  async reviews(
    @graphql.Args() args: ReviewsFindUniqueArgs
  ): Promise<Reviews | null> {
    const result = await this.service.reviews(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Reviews)
  async createReviews(
    @graphql.Args() args: CreateReviewsArgs
  ): Promise<Reviews> {
    return await this.service.createReviews({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,

        service: args.data.service
          ? {
              connect: args.data.service,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Reviews)
  async updateReviews(
    @graphql.Args() args: UpdateReviewsArgs
  ): Promise<Reviews | null> {
    try {
      return await this.service.updateReviews({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,

          service: args.data.service
            ? {
                connect: args.data.service,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Reviews)
  async deleteReviews(
    @graphql.Args() args: DeleteReviewsArgs
  ): Promise<Reviews | null> {
    try {
      return await this.service.deleteReviews(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Customers, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: Reviews
  ): Promise<Customers | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employees, {
    nullable: true,
    name: "employee",
  })
  async getEmployee(
    @graphql.Parent() parent: Reviews
  ): Promise<Employees | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Services, {
    nullable: true,
    name: "service",
  })
  async getService(
    @graphql.Parent() parent: Reviews
  ): Promise<Services | null> {
    const result = await this.service.getService(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
