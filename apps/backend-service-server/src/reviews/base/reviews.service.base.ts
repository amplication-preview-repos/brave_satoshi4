/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Reviews as PrismaReviews,
  Customers as PrismaCustomers,
  Employees as PrismaEmployees,
  Services as PrismaServices,
} from "@prisma/client";

export class ReviewsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReviewsCountArgs, "select">): Promise<number> {
    return this.prisma.reviews.count(args);
  }

  async reviewsItems<T extends Prisma.ReviewsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReviewsFindManyArgs>
  ): Promise<PrismaReviews[]> {
    return this.prisma.reviews.findMany<Prisma.ReviewsFindManyArgs>(args);
  }
  async reviews<T extends Prisma.ReviewsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReviewsFindUniqueArgs>
  ): Promise<PrismaReviews | null> {
    return this.prisma.reviews.findUnique(args);
  }
  async createReviews<T extends Prisma.ReviewsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReviewsCreateArgs>
  ): Promise<PrismaReviews> {
    return this.prisma.reviews.create<T>(args);
  }
  async updateReviews<T extends Prisma.ReviewsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReviewsUpdateArgs>
  ): Promise<PrismaReviews> {
    return this.prisma.reviews.update<T>(args);
  }
  async deleteReviews<T extends Prisma.ReviewsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReviewsDeleteArgs>
  ): Promise<PrismaReviews> {
    return this.prisma.reviews.delete(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomers | null> {
    return this.prisma.reviews
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }

  async getEmployee(parentId: string): Promise<PrismaEmployees | null> {
    return this.prisma.reviews
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }

  async getService(parentId: string): Promise<PrismaServices | null> {
    return this.prisma.reviews
      .findUnique({
        where: { id: parentId },
      })
      .service();
  }
}
