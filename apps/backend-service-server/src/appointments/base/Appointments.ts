/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsJSONValue } from "../../validators";
import { IsOptional, IsDate, ValidateNested, IsString } from "class-validator";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { Type } from "class-transformer";
import { Customers } from "../../customers/base/Customers";
import { Employees } from "../../employees/base/Employees";
import { Payments } from "../../payments/base/Payments";
import { Services } from "../../services/base/Services";

@ObjectType()
class Appointments {
  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  appointmentTime!: JsonValue;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => Customers,
  })
  @ValidateNested()
  @Type(() => Customers)
  @IsOptional()
  customer?: Customers | null;

  @ApiProperty({
    required: false,
    type: () => Employees,
  })
  @ValidateNested()
  @Type(() => Employees)
  @IsOptional()
  employee?: Employees | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [Payments],
  })
  @ValidateNested()
  @Type(() => Payments)
  @IsOptional()
  paymentsItems?: Array<Payments>;

  @ApiProperty({
    required: false,
    type: () => Services,
  })
  @ValidateNested()
  @Type(() => Services)
  @IsOptional()
  service?: Services | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  status!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Appointments as Appointments };
