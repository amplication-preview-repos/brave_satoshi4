/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Appointments } from "./Appointments";
import { AppointmentsCountArgs } from "./AppointmentsCountArgs";
import { AppointmentsFindManyArgs } from "./AppointmentsFindManyArgs";
import { AppointmentsFindUniqueArgs } from "./AppointmentsFindUniqueArgs";
import { CreateAppointmentsArgs } from "./CreateAppointmentsArgs";
import { UpdateAppointmentsArgs } from "./UpdateAppointmentsArgs";
import { DeleteAppointmentsArgs } from "./DeleteAppointmentsArgs";
import { PaymentsFindManyArgs } from "../../payments/base/PaymentsFindManyArgs";
import { Payments } from "../../payments/base/Payments";
import { Customers } from "../../customers/base/Customers";
import { Employees } from "../../employees/base/Employees";
import { Services } from "../../services/base/Services";
import { AppointmentsService } from "../appointments.service";
@graphql.Resolver(() => Appointments)
export class AppointmentsResolverBase {
  constructor(protected readonly service: AppointmentsService) {}

  async _appointmentsItemsMeta(
    @graphql.Args() args: AppointmentsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Appointments])
  async appointmentsItems(
    @graphql.Args() args: AppointmentsFindManyArgs
  ): Promise<Appointments[]> {
    return this.service.appointmentsItems(args);
  }

  @graphql.Query(() => Appointments, { nullable: true })
  async appointments(
    @graphql.Args() args: AppointmentsFindUniqueArgs
  ): Promise<Appointments | null> {
    const result = await this.service.appointments(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Appointments)
  async createAppointments(
    @graphql.Args() args: CreateAppointmentsArgs
  ): Promise<Appointments> {
    return await this.service.createAppointments({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,

        service: args.data.service
          ? {
              connect: args.data.service,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Appointments)
  async updateAppointments(
    @graphql.Args() args: UpdateAppointmentsArgs
  ): Promise<Appointments | null> {
    try {
      return await this.service.updateAppointments({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,

          service: args.data.service
            ? {
                connect: args.data.service,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Appointments)
  async deleteAppointments(
    @graphql.Args() args: DeleteAppointmentsArgs
  ): Promise<Appointments | null> {
    try {
      return await this.service.deleteAppointments(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Payments], { name: "paymentsItems" })
  async findPaymentsItems(
    @graphql.Parent() parent: Appointments,
    @graphql.Args() args: PaymentsFindManyArgs
  ): Promise<Payments[]> {
    const results = await this.service.findPaymentsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Customers, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: Appointments
  ): Promise<Customers | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Employees, {
    nullable: true,
    name: "employee",
  })
  async getEmployee(
    @graphql.Parent() parent: Appointments
  ): Promise<Employees | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Services, {
    nullable: true,
    name: "service",
  })
  async getService(
    @graphql.Parent() parent: Appointments
  ): Promise<Services | null> {
    const result = await this.service.getService(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
