/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Stores } from "./Stores";
import { StoresCountArgs } from "./StoresCountArgs";
import { StoresFindManyArgs } from "./StoresFindManyArgs";
import { StoresFindUniqueArgs } from "./StoresFindUniqueArgs";
import { CreateStoresArgs } from "./CreateStoresArgs";
import { UpdateStoresArgs } from "./UpdateStoresArgs";
import { DeleteStoresArgs } from "./DeleteStoresArgs";
import { EmployeesFindManyArgs } from "../../employees/base/EmployeesFindManyArgs";
import { Employees } from "../../employees/base/Employees";
import { ServicesFindManyArgs } from "../../services/base/ServicesFindManyArgs";
import { Services } from "../../services/base/Services";
import { StoresService } from "../stores.service";
@graphql.Resolver(() => Stores)
export class StoresResolverBase {
  constructor(protected readonly service: StoresService) {}

  async _storesItemsMeta(
    @graphql.Args() args: StoresCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Stores])
  async storesItems(
    @graphql.Args() args: StoresFindManyArgs
  ): Promise<Stores[]> {
    return this.service.storesItems(args);
  }

  @graphql.Query(() => Stores, { nullable: true })
  async stores(
    @graphql.Args() args: StoresFindUniqueArgs
  ): Promise<Stores | null> {
    const result = await this.service.stores(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Stores)
  async createStores(@graphql.Args() args: CreateStoresArgs): Promise<Stores> {
    return await this.service.createStores({
      ...args,
      data: {
        ...args.data,

        employees: args.data.employees
          ? {
              connect: args.data.employees,
            }
          : undefined,

        services: args.data.services
          ? {
              connect: args.data.services,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Stores)
  async updateStores(
    @graphql.Args() args: UpdateStoresArgs
  ): Promise<Stores | null> {
    try {
      return await this.service.updateStores({
        ...args,
        data: {
          ...args.data,

          employees: args.data.employees
            ? {
                connect: args.data.employees,
              }
            : undefined,

          services: args.data.services
            ? {
                connect: args.data.services,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Stores)
  async deleteStores(
    @graphql.Args() args: DeleteStoresArgs
  ): Promise<Stores | null> {
    try {
      return await this.service.deleteStores(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Employees], { name: "employeesItems" })
  async findEmployeesItems(
    @graphql.Parent() parent: Stores,
    @graphql.Args() args: EmployeesFindManyArgs
  ): Promise<Employees[]> {
    const results = await this.service.findEmployeesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Services], { name: "servicesItems" })
  async findServicesItems(
    @graphql.Parent() parent: Stores,
    @graphql.Args() args: ServicesFindManyArgs
  ): Promise<Services[]> {
    const results = await this.service.findServicesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Employees, {
    nullable: true,
    name: "employees",
  })
  async getEmployees(
    @graphql.Parent() parent: Stores
  ): Promise<Employees | null> {
    const result = await this.service.getEmployees(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Services, {
    nullable: true,
    name: "services",
  })
  async getServices(
    @graphql.Parent() parent: Stores
  ): Promise<Services | null> {
    const result = await this.service.getServices(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
