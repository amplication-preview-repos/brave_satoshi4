/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Stores as PrismaStores,
  Employees as PrismaEmployees,
  Services as PrismaServices,
} from "@prisma/client";

export class StoresServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StoresCountArgs, "select">): Promise<number> {
    return this.prisma.stores.count(args);
  }

  async storesItems<T extends Prisma.StoresFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoresFindManyArgs>
  ): Promise<PrismaStores[]> {
    return this.prisma.stores.findMany<Prisma.StoresFindManyArgs>(args);
  }
  async stores<T extends Prisma.StoresFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoresFindUniqueArgs>
  ): Promise<PrismaStores | null> {
    return this.prisma.stores.findUnique(args);
  }
  async createStores<T extends Prisma.StoresCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoresCreateArgs>
  ): Promise<PrismaStores> {
    return this.prisma.stores.create<T>(args);
  }
  async updateStores<T extends Prisma.StoresUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoresUpdateArgs>
  ): Promise<PrismaStores> {
    return this.prisma.stores.update<T>(args);
  }
  async deleteStores<T extends Prisma.StoresDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoresDeleteArgs>
  ): Promise<PrismaStores> {
    return this.prisma.stores.delete(args);
  }

  async findEmployeesItems(
    parentId: string,
    args: Prisma.EmployeesFindManyArgs
  ): Promise<PrismaEmployees[]> {
    return this.prisma.stores
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeesItems(args);
  }

  async findServicesItems(
    parentId: string,
    args: Prisma.ServicesFindManyArgs
  ): Promise<PrismaServices[]> {
    return this.prisma.stores
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .servicesItems(args);
  }

  async getEmployees(parentId: string): Promise<PrismaEmployees | null> {
    return this.prisma.stores
      .findUnique({
        where: { id: parentId },
      })
      .employees();
  }

  async getServices(parentId: string): Promise<PrismaServices | null> {
    return this.prisma.stores
      .findUnique({
        where: { id: parentId },
      })
      .services();
  }
}
