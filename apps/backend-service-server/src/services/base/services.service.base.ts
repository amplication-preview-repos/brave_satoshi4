/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Services as PrismaServices,
  Appointments as PrismaAppointments,
  Reviews as PrismaReviews,
  Stores as PrismaStores,
} from "@prisma/client";

export class ServicesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ServicesCountArgs, "select">): Promise<number> {
    return this.prisma.services.count(args);
  }

  async servicesItems<T extends Prisma.ServicesFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServicesFindManyArgs>
  ): Promise<PrismaServices[]> {
    return this.prisma.services.findMany<Prisma.ServicesFindManyArgs>(args);
  }
  async services<T extends Prisma.ServicesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServicesFindUniqueArgs>
  ): Promise<PrismaServices | null> {
    return this.prisma.services.findUnique(args);
  }
  async createServices<T extends Prisma.ServicesCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServicesCreateArgs>
  ): Promise<PrismaServices> {
    return this.prisma.services.create<T>(args);
  }
  async updateServices<T extends Prisma.ServicesUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServicesUpdateArgs>
  ): Promise<PrismaServices> {
    return this.prisma.services.update<T>(args);
  }
  async deleteServices<T extends Prisma.ServicesDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServicesDeleteArgs>
  ): Promise<PrismaServices> {
    return this.prisma.services.delete(args);
  }

  async findAppointmentsItems(
    parentId: string,
    args: Prisma.AppointmentsFindManyArgs
  ): Promise<PrismaAppointments[]> {
    return this.prisma.services
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointmentsItems(args);
  }

  async findReviewsItems(
    parentId: string,
    args: Prisma.ReviewsFindManyArgs
  ): Promise<PrismaReviews[]> {
    return this.prisma.services
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviewsItems(args);
  }

  async findStoresItems(
    parentId: string,
    args: Prisma.StoresFindManyArgs
  ): Promise<PrismaStores[]> {
    return this.prisma.services
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .storesItems(args);
  }

  async getStore(parentId: string): Promise<PrismaStores | null> {
    return this.prisma.services
      .findUnique({
        where: { id: parentId },
      })
      .store();
  }
}
