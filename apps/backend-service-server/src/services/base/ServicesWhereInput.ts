/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AppointmentsListRelationFilter } from "../../appointments/base/AppointmentsListRelationFilter";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { StringFilter } from "../../util/StringFilter";
import { FloatNullableFilter } from "../../util/FloatNullableFilter";
import { ReviewsListRelationFilter } from "../../reviews/base/ReviewsListRelationFilter";
import { StoresWhereUniqueInput } from "../../stores/base/StoresWhereUniqueInput";
import { StoresListRelationFilter } from "../../stores/base/StoresListRelationFilter";

@InputType()
class ServicesWhereInput {
  @ApiProperty({
    required: false,
    type: () => AppointmentsListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AppointmentsListRelationFilter)
  @IsOptional()
  @Field(() => AppointmentsListRelationFilter, {
    nullable: true,
  })
  appointmentsItems?: AppointmentsListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  description?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  duration?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: FloatNullableFilter,
  })
  @Type(() => FloatNullableFilter)
  @IsOptional()
  @Field(() => FloatNullableFilter, {
    nullable: true,
  })
  price?: FloatNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ReviewsListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ReviewsListRelationFilter)
  @IsOptional()
  @Field(() => ReviewsListRelationFilter, {
    nullable: true,
  })
  reviewsItems?: ReviewsListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  serviceName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => StoresWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StoresWhereUniqueInput)
  @IsOptional()
  @Field(() => StoresWhereUniqueInput, {
    nullable: true,
  })
  store?: StoresWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => StoresListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StoresListRelationFilter)
  @IsOptional()
  @Field(() => StoresListRelationFilter, {
    nullable: true,
  })
  storesItems?: StoresListRelationFilter;
}

export { ServicesWhereInput as ServicesWhereInput };
