/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Appointments } from "../../appointments/base/Appointments";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsInt,
  IsNumber,
} from "class-validator";
import { Type } from "class-transformer";
import { Reviews } from "../../reviews/base/Reviews";
import { Stores } from "../../stores/base/Stores";

@ObjectType()
class Services {
  @ApiProperty({
    required: false,
    type: () => [Appointments],
  })
  @ValidateNested()
  @Type(() => Appointments)
  @IsOptional()
  appointmentsItems?: Array<Appointments>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  duration!: number | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  price!: number | null;

  @ApiProperty({
    required: false,
    type: () => [Reviews],
  })
  @ValidateNested()
  @Type(() => Reviews)
  @IsOptional()
  reviewsItems?: Array<Reviews>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  serviceName!: string | null;

  @ApiProperty({
    required: false,
    type: () => Stores,
  })
  @ValidateNested()
  @Type(() => Stores)
  @IsOptional()
  store?: Stores | null;

  @ApiProperty({
    required: false,
    type: () => [Stores],
  })
  @ValidateNested()
  @Type(() => Stores)
  @IsOptional()
  storesItems?: Array<Stores>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Services as Services };
